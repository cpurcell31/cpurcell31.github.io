---
layout: post
title:  "DownUnder CTF 2021 Writeup"
tags: CTF
---

- OSINT
  - (back) On the rails
  - Heart of the nation
- Forensics
  - Do the loop!
  - That's Not My Name!
  - Want to Play a Game?
{:toc}

&nbsp;

## OSINT

### (back) On the rails

>We intercepted further communications between the two. This text was sent shortly before we lost track of one of the suspects, with an image attached. Can you
>work out what they're talking about?
>
>Okay, please promise not to judge me, but I might have ended up catching the wrong train again. Though I think I'm still in Australia this time (at least it
>isn't like that time in Norway LOL). I managed to snap a picture before we went past this station… you have any ideas where I might be?
>
>Please tell us the name of the station, with any spaces replaced by underscores.
>
>Flag format: DUCTF{station_name}
>
>Author: xXl33t_h@x0rXx

For this OSINT challenge we are given a single image and are tasked with finding the name of the train station where the photo was taken.
Before looking at the image, I should preface that all OSINT challenges are restricted to locations in Australia.
This narrows down our search quite a bit but not enough to make this easy, Australia is still massive. Now then, let's look at the image.

[![Train Station](/assets/DUCTF/rails.png)](/assets/DUCTF/rails.png)
<figcaption align=center><b>Figure 1-1: The Original Challenge Image - A Rundown Train Station</b></figcaption>
&nbsp;

The image doesn't have the greatest resolution, but there should be enough details to figure out which station this is.
Most notably, the station looks fairly beat down and some unique graffiti can be found decorating the building on the
left of the image. Searching for rundown train stations in Australia seemed like a good next step. However before
starting the search, we tried inputting the image into Google Lens to see if it could match the location.

[![Google Lens](/assets/DUCTF/train2.jpg)](/assets/DUCTF/train2.jpg)
<figcaption align=center><b>Figure 1-2: Results from Inputting the Challenge Picture into Google Lens</b></figcaption>
&nbsp;

Google Lens quickly returns a result which is worth further investigation, General Motors Station in Melbourne.
A quick search reveals that General Motors Station is likely to be the right station. The station is not only
permanently closed, but is also covered in graffiti. The second link from the results in **Figure 1-2** reveals some
interesting photographs of the station.

[![Solution](/assets/DUCTF/train4.jpeg)](/assets/DUCTF/train4.jpeg)
<figcaption align=center><b>Figure 1-3: An Image of General Motors Station from https://railgallery.wongm.com/melbourne-stations/F128_0283.jpg.html</b></figcaption>
&nbsp;

This photo taken from [Wongm's Rail Gallery](https://railgallery.wongm.com/), shows the exact graffiti and
building as shown in the original image. There is no doubt about it, this is the correct train station.

>DUCTF{general_motors_station}

&nbsp;

### Heart of the nation

>We found some files on the website (not really), the caption was
>“Right at the heart of the nation, no piece of the bush inside the circle remains untouched by us".
>
>We believe this is one of their meeting places, can you help us find the location of the photo truncated (not rounded) to three decimal places?
>
>Flag format is DUCTF{lon,lat}
>
>Author: xXl33t_h@x0rXx

For Heart of the nation we are given a single photo and need to find the location's coordinates. Once again, this location is
restricted to Australia so that narrows the search down a little bit. Here is the image we start with.

[![Challenge Image](/assets/DUCTF/aus.jpg)](/assets/DUCTF/aus.jpg)
<figcaption align=center><b>Figure 2-1: The Original Challenge Image - A Meeting Place</b></figcaption>
&nbsp;

Given **Figure 2-1**, it must be almost impossible to find this location unless you had been there before. There are a few
minor details in the image that seemed worth checking out.

- The information sign located on the right side of the image
- The specific trees throughout the area
- A streetlight nearby the location
- A stone semi-circle in the middle of the image

Using some of these details we can narrow down the possible locations further. Since there is a streetlight close-by,
this photo must have been taken in a city or near a road. The sign points to this location being a historical site,
national park, etc.

To start our search, we wasted a ton of time looking through various national parks, historic sites, and
even tried correlating the specific type of tree to the location. Later on we found that the challenge
description was the key to solving this challenge.

>“Right at the heart of the nation, no piece of the bush inside the circle remains untouched by us".

The caption from the description provides a riddle that describes the location in the photo.
By breaking this riddle into parts we were able to figure out the exact location.

First, "Right at the heart of the nation" could refer to a few things, the physical heart of the nation,
the cultural heart of the nation, or the political heart. The physical heart was an easy starting place.
We began our search right in the middle of Australia for places that fit our requirements.

[![Alice Springs](/assets/DUCTF/aus2.png)](/assets/DUCTF/aus2.png)
<figcaption align=center><b>Figure 2-2: The Location and Scenery of Alice Springs</b></figcaption>
&nbsp;

Alice Springs was the first and only area we checked. At first, Alice Springs seemed like
a good fit. However as we searched Alice Springs and the surrounding area, there was a big problem.
The foliage did not match at all, the Outback did not have the same amount of trees or greenery as the photo.
Meaning the riddle was likely not pointing to the physical heart of Australia.

For our next venture, we skipped ahead to the political heart. The cultural heart seemed a bit too
subjective to investigate right away. Anyway, the political heart of Australia had to be the
capital, Canberra. Canberra is home to Australia's parliament, senate, and a slew of embassies.
Now if we were looking for the true political heart, starting at the parliament seems like the best bet.

[![Parliament](/assets/DUCTF/aus3.png)](/assets/DUCTF/aus3.png)
<figcaption align=center><b>Figure 2-3: A Google Maps View of Canberra's Parliament Building</b></figcaption>
&nbsp;

Weirdly enough, the parliament building is located in the middle of a giant circular road.
This also matches the second half of the riddle, "no piece of the bush inside the circle remains untouched by us".
Next, we looked through this surrounding area until we found the following location.

[![Signage](/assets/DUCTF/aus4.png)](/assets/DUCTF/aus4.png)
<figcaption align=center><b>Figure 2-4: A Similar Looking Location and Sign</b></figcaption>
&nbsp;

The sign was an exact match to the one from **Figure 2-1**. However, this location wasn't quite right.
A few more seconds searching inside the circle revealed the solution.

[![Solution](/assets/DUCTF/aus5.png)](/assets/DUCTF/aus5.png)
<figcaption align=center><b>Figure 2-5: The Location of the Original Photo</b></figcaption>
&nbsp;

Finally, we had the right area, with the right sign and the right streetlight. The final step was to
record the coordinates from Google Maps and submit the flag.

>DUCTF{-35.306,149.120}

&nbsp;

## Forensics

### Do the loop!

>Do the loop doop doop...
>
>Flag format: The STRING you end up with after solving challenge, case insensitive.
>Author: QUT_WH

For this forensics challenge we are given an audio file and need to find a string hidden in it.
The given audio file sounds like a jingle for the Sydney Metro Monorail, but it has some strange
beeping behind the main audio.

[Click here to listen to the audio](/assets/DUCTF/monorail.wav)

The beeping seems to be a Morse code sequence, we just need to separate it from the singing and
decode it. To continue, we popped the audio file into Audacity and switched to the spectrogram view.

[![Audacity](/assets/DUCTF/theloop2.png)](/assets/DUCTF/theloop2.png)
<figcaption align=center><b>Figure 3-1: An Audacity Spectrogram View of monorail.wav</b></figcaption>
&nbsp;

The spectrogram view details the exact dots and dashes of the Morse code sequence.
To get a better look at the sequence, we can "zoom in" by changing the frequency range
in the spectrogram settings menu.

[![Spectrogram Range Change](/assets/DUCTF/theloop3.png)](/assets/DUCTF/theloop3.png)
<figcaption align=center><b>Figure 3-2: The "Zoomed in" Spectrogram View of monorail.wav</b></figcaption>
&nbsp;

Finally, all that's left is to record the sequence and decode it. The resulting
text should be the flag. To decode, it is simplest to use a decoding site.

>.. -.-. --- ..- .-.. -.. .-.. .. ... - . -. - --- - .... .. ... --- -. .-.. --- --- .--. .- .-.. .-.. -.. .- -.--
>
>ICOULDLISTENTOTHISONLOOPALLDAY  

&nbsp;

### That's Not My Name!

>I think some of my data has been stolen, can you help me?
>
>Author: Conletz#5420

That's Not My Name! is all about examining a packet capture for some hidden data.
First off, let's load the capture into Wireshark and examine the protocol hierarchy.

[![Protocols](/assets/DUCTF/name1.png)](/assets/DUCTF/name1.png)
<figcaption align=center><b>Figure 4-1: The Initial Protocol Hierarchy of notmyname.pcapng</b></figcaption>
&nbsp;

This capture has a ton of packets in it so we need to filter down some of the chaff.
Since we have no way of decrypting the TLS traffic yet, we decided to filter out TLS traffic first.

[![Protocols After Filter](/assets/DUCTF/name2.png)](/assets/DUCTF/name2.png)
<figcaption align=center><b>Figure 4-2: The Protocol Hierarchy After Filtering Out TLS Traffic</b></figcaption>
&nbsp;

**Figure 4-2** shows the results of the filter on the packet counts. Filtering out TLS essentially
cut down the search area by half! From the remaining protocols, as highlighted in **Figure 4-2**,
we can see that DNS has the next greatest amount of traffic at 45617 packets. We next applied a new
filter to examine only DNS traffic.

[![DNS Packets](/assets/DUCTF/name3.png)](/assets/DUCTF/name3.png)
<figcaption align=center><b>Figure 4-3: A Weird DNS Query Among the Packets</b></figcaption>
&nbsp;

After a bit of scrolling through packets, we came across a suspicious looking entry. There is a DNS query for
"77040023090da10021636f6d6d616e642028446f776e556e646572436f29.00.qawesrdtfgyhuj.xyz" among
the several normal queries. The first section of the query looked like a sequence of hexadecimal, so
we tried decoding it to see what popped out.

>w..#
>¡.!command (DownUnderCo)

Weirdly enough, some intelligible text popped out. We then tried to see if there were any more weird DNS queries like this one.
By following the UDP stream of this query packet, Wireshark detailed about 24000 similar packets.

[![UDP Stream](/assets/DUCTF/name4.png)](/assets/DUCTF/name4.png)
<figcaption align=center><b>Figure 4-4: The UDP Stream View of the Weird DNS Query</b></figcaption>
&nbsp;

As **Figure 4-4** shows, we also filtered the stream down to only client packets to keep only the DNS requests.
Next using the "Save as..." option in the stream window, we exported the query data to attempt to decode all the hex.
We used [CyberChef](https://gchq.github.io/CyberChef/) to quickly strip some unnecessary text and decode the hex.

[![CyberChef](/assets/DUCTF/name5.png)](/assets/DUCTF/name5.png)
<figcaption align=center><b>Figure 4-5: Using CyberChef to Filter and Decode the DNS Query Data</b></figcaption>
&nbsp;

Using regular expressions, we filtered out all the non-hex characters and then applied the "From Hex"
tool to translate the remaining data. The results were a mix of nonsense and some moments of clarity.
Scrolling through the output, we could see several instances of Lorem Ipsum. From here we tried a
Hail Mary and searched the translated text for the DUCTF flag format.

[![Solution](/assets/DUCTF/namesol.png)](/assets/DUCTF/namesol.png)
<figcaption align=center><b>Figure 4-6: Finding the Flag Using Regular Expressions in CyberChef</b></figcaption>
&nbsp;

With the "Regular Expression" tool, we found that the flag was hidden within the decoded output.

>DUCTF{c4t_g07_y0ur_n4m3}

&nbsp;

### Want to Play a Game?

>My PC has been infected! I need help finding out what happened. I managed to get a memory dump, not sure if that can help you?
>
>In order to recover from this infection, I need the following information:
>
>What is the name of the malware that infected my PC?
>What is the name of the persistence mechanism?
>What folder did the infection originate from?
>Flag format: DUCTF{lowerCaseMalwareName_persistenceName_originatingFolderName}
>
>You can download the memory dump here.
>
>The file is password protected. The password is I83xOkTzeljDmpMmZWTi.
>
>Author: Conletz#5420



&nbsp;
